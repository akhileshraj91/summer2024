import os
import pandas as pd
import matplotlib.pyplot as plt
import math
import numpy as np
import tarfile
from matplotlib import cm
import warnings
import yaml
import csv
import re

plt.rcParams.update({'font.size': 12, "font.weight": "bold", 'axes.labelsize': 'x-large'})
plt.tight_layout()  # Add this line to adjust the layout
warnings.filterwarnings('ignore')

current_working_directory = os.path.dirname(os.path.abspath(__file__))

os.chdir(current_working_directory)

exp_type = 'identification' 
experiment_dir = f'{current_working_directory}/experiment_data/{exp_type}/'

root, apps, files = next(os.walk(experiment_dir))
num_subs = len(apps)

colormap = plt.cm.get_cmap('tab10', len(apps))

def calculate_power_with_wraparound(current, previous, time_diff, wraparound_value=262143.328850):
    diff = current - previous
    if diff < 0:  # Wraparound detected
        diff = (wraparound_value - previous) + current
    return diff / time_diff

def compute_power(pubEnergy):
    power = {}
    geopm_sensor0 = geopm_sensor1 = pd.DataFrame({'timestamp':[],'value':[]})
    for i,row in pubEnergy.iterrows():
        if i%2 == 0:
            geopm_sensor0 = pd.concat([geopm_sensor0, pd.DataFrame([{'timestamp': row['time'], 'value': row['value']}])], ignore_index=True)
        else:
            geopm_sensor1 = pd.concat([geopm_sensor1, pd.DataFrame([{'timestamp': row['time'], 'value': row['value']}])], ignore_index=True)


    power['geopm_power_0'] = pd.DataFrame({
        'timestamp': geopm_sensor0['timestamp'][1:],  # Add timestamps
        'power': [
            calculate_power_with_wraparound(
                geopm_sensor0['value'][i],
                geopm_sensor0['value'][i-1],
                geopm_sensor0['timestamp'][i] - geopm_sensor0['timestamp'][i-1]
            ) for i in range(1, len(geopm_sensor0))
        ]
    })

    # Apply the same logic to geopm_power_1
    power['geopm_power_1'] = pd.DataFrame({
        'timestamp': geopm_sensor1['timestamp'][1:],  # Add timestamps
        'power': [
            calculate_power_with_wraparound(
                geopm_sensor1['value'][i],
                geopm_sensor1['value'][i-1],
                geopm_sensor1['timestamp'][i] - geopm_sensor1['timestamp'][i-1]
            ) for i in range(1, len(geopm_sensor1))
        ]
    })

    min_length = min(len(power['geopm_power_0']), len(power['geopm_power_1']))
    geopm_power_0 = power['geopm_power_0'][:min_length]
    geopm_power_1 = power['geopm_power_1'][:min_length]

    average_power = pd.DataFrame({
        'timestamp': geopm_power_0['timestamp'],  # Use the timestamp from geopm_power_0
        'average_power': [(p0 + p1) / 2 for p0, p1 in zip(geopm_power_0['power'], geopm_power_1['power'])]
    })
    average_power['elapsed_time'] = average_power['timestamp'] - average_power['timestamp'].iloc[0]
    power['average_power'] = average_power
    return power

def measure_progress(progress_data, energy_data):
    progress_sensor = pd.DataFrame(progress_data)
    first_sensor_point = min(energy_data['time'][0], progress_sensor['time'][0])
    progress_sensor['elapsed_time'] = progress_sensor['time'] - first_sensor_point  # New column for elapsed time
    # progress_sensor = progress_sensor.set_index('elapsed_time')
    performance_elapsed_time = progress_sensor.elapsed_time
    # Add performance_frequency as a new column in progress_sensor
    frequency_values = [
        progress_data['value'].iloc[t] / (performance_elapsed_time[t] - performance_elapsed_time[t-1]) for t in range(1, len(performance_elapsed_time))
    ]
    
    # Ensure the frequency_values length matches the index length
    frequency_values = [0] + frequency_values  # Prepend a 0 for the first index
    progress_sensor['frequency'] = frequency_values
    return progress_sensor

def collect_papi(PAPI_data):
    PAPI = {}
    for scope in PAPI_data['scope'].unique():
        # Extract the string between the 3rd and 4th dots
        scope_parts = scope.split('.')
        if len(scope_parts) > 4:  # Ensure there are enough parts
            extracted_scope = scope_parts[3]
            # Aggregate the data for the extracted scope using pd.concat
            PAPI[extracted_scope] = PAPI_data[PAPI_data['scope'] == scope]
            instantaneous_values = [0] + [PAPI[extracted_scope]['value'].iloc[k] - PAPI[extracted_scope]['value'].iloc[k-1] for k in range(1,len(PAPI[extracted_scope]))]
            # Normalize the instantaneous values between 0 and 10
            min_val = min(instantaneous_values)
            max_val = max(instantaneous_values)
            PAPI[extracted_scope]['instantaneous_value'] = [(value - min_val) / (max_val - min_val) * 10 for value in instantaneous_values]
            PAPI[extracted_scope]['elapsed_time'] = PAPI[extracted_scope]['time'] - PAPI[extracted_scope]['time'].iloc[0]
    return PAPI

traces = {}

# Check if RESULTS directory exists, if not, create it
results_dir = f'{current_working_directory}/experiment_data/RESULTS'
if not os.path.exists(results_dir):
    os.makedirs(results_dir)  # Create the directory if it doesn't exist

for app_index, app in enumerate(apps):
    fig, axs = plt.subplots(2,1,figsize=(12,10))
    fig_PAPI, axs_PAPI = plt.subplots(5,1,figsize=(12,16))

    cwd = root + '/' + app
    if next(os.walk(cwd))[1] == []:
        files = os.listdir(cwd)
        for fname in files:
            if fname.endswith("tar"):
                print(fname)
                tar = tarfile.open(cwd + '/' + fname, "r")
                tar.extractall(path=cwd + '/' + fname[:-4])
                tar.close()
    traces[app] = {'directories': next(os.walk(cwd))[1]}
    data = {}
    for trace in traces[app]['directories']:
        data[trace] = {}
        pwd = f'{cwd}/{trace}'
        pubProgress = pd.read_csv(f'{pwd}/progress.csv')
        pubEnergy = pd.read_csv(f'{pwd}/energy.csv')
        pubPAPI = pd.read_csv(f'{pwd}/papi.csv')
    
        data[trace]['progress'] = measure_progress(pubProgress,pubEnergy)
        data[trace]['power'] = compute_power(pubEnergy)
        data[trace]['papi'] = collect_papi(pubPAPI)
        color = cm.tab10(len(data))  # Get a color from the colormap for each trace
        axs[0].scatter(data[trace]['progress']['elapsed_time'], data[trace]['progress']['frequency'], label=trace[-4:])  # Added label for legend
        axs[1].scatter(data[trace]['power']['average_power']['elapsed_time'], data[trace]['power']['average_power']['average_power'], label=trace[-4:])  # Added label for legend
        axs[0].grid(True)
        axs[1].grid(True)
        axs[1].set_xlabel("Elapsed Time (s)")  # Changed to set_xlabel
        axs[0].set_ylabel("Progress")  # Changed to set_ylabel
        axs[1].set_ylabel("Power (W)")  # Changed to set_ylabel
        axs[0].legend()  # Added legend for progress plot
        axs[1].legend()  # Added legend for power plot
        fig.suptitle(app)

        for i,scope in enumerate(data[trace]['papi'].keys()):
            axs_PAPI[i].scatter(data[trace]['papi'][scope]['elapsed_time'], data[trace]['papi'][scope]['instantaneous_value'], label=trace[-4:])
            axs_PAPI[i].grid(True)
            axs_PAPI[i].set_ylabel(f"{scope} value")
        axs_PAPI[i].set_xlabel("Elapsed Time (s)")
        fig_PAPI.suptitle(app)
        
        fig.savefig(f'{current_working_directory}/experiment_data/RESULTS/{app}.pdf')
        fig_PAPI.savefig(f'{current_working_directory}/experiment_data/RESULTS/{app}_PAPI.pdf')

        # data[trace]['progress']['frequency'].set_index('elapsed_time').plot(color=color, ax=axs[0], marker="+", linestyle='')
        # data[trace]['power']['average_power'].set_index('elapsed_time').plot(color=color, ax=axs[1], marker="+", linestyle='')
        # plt.show()
    # print(data)